/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.qoopo.engine3d.editor.entity.componentes.animacion;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import net.qoopo.engine.core.entity.Entity;
import net.qoopo.engine.core.entity.component.animation.Bone;
import net.qoopo.engine.core.entity.component.animation.Skeleton;

/**
 *
 * @author alberto
 */
public class PnlEsqueleto extends javax.swing.JPanel {
    
    private Skeleton esqueleto;

    /**
     * Creates new form PnlAudioListener
     */
    public PnlEsqueleto(Skeleton esqueleto) {
        initComponents();
        //limpio el arbol del esqueleto
        treeEsqueleto.setModel(null);
        
        this.esqueleto = esqueleto;
        cargar();
    }
    
    private static DefaultMutableTreeNode generarArbolEntidad(Entity entidad) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(entidad.getName());
        if (entidad.getChilds() != null) {
            for (Entity hijo : entidad.getChilds()) {
                nodo.add(generarArbolEntidad(hijo));
            }
        }
        return nodo;
    }
    
    private void cargar() {
        //busco el hueso raiz
//        for (QHueso hueso : esqueleto.getHuesos()) {
//            if (hueso.getPadre() == null) {
//                System.out.println("padre:" + hueso.nombre);
//                DefaultMutableTreeNode raiz = generarArbolEntidad(hueso);
//                treeEsqueleto.setModel(new DefaultTreeModel(raiz));
//            }
//        }
        
        DefaultMutableTreeNode nodoRaiz = new DefaultMutableTreeNode(esqueleto.getEntity().getName());
//        DefaultMutableTreeNode nodoRaiz = new DefaultMutableTreeNode("Esqueleto");
        
        for (Bone hueso : esqueleto.getHuesos()) {
            if (hueso.getParent() == null) {
                DefaultMutableTreeNode raiz = generarArbolEntidad(hueso);
                nodoRaiz.add(raiz);
            }
        }
        
        treeEsqueleto.setModel(new DefaultTreeModel(nodoRaiz));
        chkMostrar.setSelected(esqueleto.isMostrar());
        chkSuperponer.setSelected(esqueleto.isSuperponer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        treeEsqueleto = new javax.swing.JTree();
        chkMostrar = new javax.swing.JCheckBox();
        chkSuperponer = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Esqueleto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9))); // NOI18N

        treeEsqueleto.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jScrollPane7.setViewportView(treeEsqueleto);

        chkMostrar.setText("Mostrar");
        chkMostrar.setToolTipText("Muestra el esqueleto ");
        chkMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMostrarActionPerformed(evt);
            }
        });

        chkSuperponer.setText("Superponer");
        chkSuperponer.setToolTipText("Muestra el esqueleto superpuesto a la malla");
        chkSuperponer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSuperponerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chkMostrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkSuperponer)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMostrar)
                    .addComponent(chkSuperponer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMostrarActionPerformed
        esqueleto.setMostrar(chkMostrar.isSelected());
    }//GEN-LAST:event_chkMostrarActionPerformed

    private void chkSuperponerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSuperponerActionPerformed
        esqueleto.setSuperponer(chkSuperponer.isSelected());
    }//GEN-LAST:event_chkSuperponerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkMostrar;
    private javax.swing.JCheckBox chkSuperponer;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTree treeEsqueleto;
    // End of variables declaration//GEN-END:variables
}
